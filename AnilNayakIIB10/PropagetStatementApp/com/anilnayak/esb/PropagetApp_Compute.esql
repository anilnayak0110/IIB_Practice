/*

Sample XML to be supplied as below:

<People>
	<Person>
		<FirstName>Name1FN</FirstName>
		<LastName>Name1LN</LastName>
		<Profession>IT</Profession>
		<NName>N1</NName>
	</Person>
	<Person>
		<FirstName>Name2FN</FirstName>
		<LastName>Name2LN</LastName>
		<Profession>SEC</Profession>
		<NName>N2</NName>
	</Person>
	<Person>
		<FirstName>Name3FN</FirstName>
		<LastName>Name3LN</LastName>
		<Profession>ADMIN</Profession>
		<NName>N3</NName>
	</Person>
	<Person>
		<FirstName>Name4FN</FirstName>
		<LastName>Name4LN</LastName>
		<Profession>IT</Profession>
		<NName>N4</NName>
	</Person>
	<Person>
		<FirstName>Name5FN</FirstName>
		<LastName>Name5LN</LastName>
		<Profession>SEC</Profession>
		<NName>N5</NName>
	</Person>
	<Person>
		<FirstName>Name6FN</FirstName>
		<LastName>Name6LN</LastName>
		<Profession>ADMIN</Profession>
		<NName>N6</NName>
	</Person>
	<Person>
		<FirstName>Name7FN</FirstName>
		<LastName>Name7LN</LastName>
		<Profession>IT</Profession>
		<NName>N7</NName>
	</Person>
	<Person>
		<FirstName>Name8FN</FirstName>
		<LastName>Name8LN</LastName>
		<Profession>SEC</Profession>
		<NName>N8</NName>
	</Person>
	<Person>
		<FirstName>Name9FN</FirstName>
		<LastName>Name9LN</LastName>
		<Profession>ADMIN</Profession>
		<NName>N9</NName>
	</Person>
</People>

*/

BROKER SCHEMA com.anilnayak.esb


CREATE COMPUTE MODULE PropagetApp_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		CALL PropagetToProfessions();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		--SET OutputRoot = InputRoot;
	END;
	CREATE PROCEDURE PropagetToProfessions ( )
	BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		DECLARE name CHARACTER;
		
		
		SET J = CARDINALITY(InputRoot.XMLNSC.People.Person[]);
		WHILE I<=J DO
			SET name = InputRoot.XMLNSC.People.Person[I].Profession;
			IF name     = 'IT' THEN
				SET OutputRoot.XMLNSC.People.person.FirstName  = InputRoot.XMLNSC.People.Person[I].FirstName;
		        SET OutputRoot.XMLNSC.People.person.LastName   = InputRoot.XMLNSC.People.Person[I].LastName;
		        SET OutputRoot.XMLNSC.People.person.Profession = InputRoot.XMLNSC.People.Person[I].Profession;
		        SET OutputRoot.XMLNSC.People.person.NName      = InputRoot.XMLNSC.People.NickNames.NickName[I].NName;
		        PROPAGATE TO TERMINAL 'out';
			ELSEIF name = 'MBA' THEN
				SET OutputRoot.XMLNSC.People.person.FirstName  = InputRoot.XMLNSC.People.Person[I].FirstName;
		        SET OutputRoot.XMLNSC.People.person.LastName   = InputRoot.XMLNSC.People.Person[I].LastName;
		        SET OutputRoot.XMLNSC.People.person.Profession = InputRoot.XMLNSC.People.Person[I].Profession;
		        SET OutputRoot.XMLNSC.People.person.NName      = InputRoot.XMLNSC.People.NickNames.NickName[I].NName;
		        PROPAGATE TO TERMINAL 'out1';
			ELSE
				SET OutputRoot.XMLNSC.People.person.FirstName  = InputRoot.XMLNSC.People.Person[I].FirstName;
		        SET OutputRoot.XMLNSC.People.person.LastName   = InputRoot.XMLNSC.People.Person[I].LastName;
		        SET OutputRoot.XMLNSC.People.person.Profession = InputRoot.XMLNSC.People.Person[I].Profession;
		        SET OutputRoot.XMLNSC.People.person.NName      = InputRoot.XMLNSC.People.NickNames.NickName[I].NName;
		        PROPAGATE TO TERMINAL 'out2';
			END IF;
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;
