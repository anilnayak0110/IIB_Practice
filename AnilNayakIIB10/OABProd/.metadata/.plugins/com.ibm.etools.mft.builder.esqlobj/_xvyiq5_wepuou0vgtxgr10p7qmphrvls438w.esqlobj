CREATE COMPUTE MODULE WPS_SIF_Processing_CBO_Compute
	DECLARE SCH_NAME EXTERNAL CHARACTER;
	DECLARE WPS_TABLE1 EXTERNAL CHARACTER;
	DECLARE WPS_TABLE2 EXTERNAL CHARACTER;
	DECLARE USER EXTERNAL CHARACTER;
	DECLARE Payer_BIC EXTERNAL CHARACTER;
	DECLARE WORKSTATION EXTERNAL CHARACTER;
	DECLARE CHANNELRESERVED EXTERNAL CHARACTER;
	DECLARE CHANEEL EXTERNAL CHARACTER;
	DECLARE CURRENCY EXTERNAL CHARACTER;
	DECLARE operation,chlId,refernce,employeeCR CHARACTER;
	DECLARE sifFileName CHARACTER;
	DECLARE recordDb ROW;
	DECLARE LOG4J_CONF_FILE EXTERNAL CHARACTER;
	DECLARE cbsReqMessage BLOB;
	DECLARE bool,rc BOOLEAN;

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		/*initialising Log4j*/
		CALL initLog4j(LOG4J_CONF_FILE) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET msg = 'Log4J Initialization failed.';
		END IF;

		SET bool= CopyEntireMessage();
		call SendAcknolegment();
		RETURN bool;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	CREATE PROCEDURE CopyEntireMessage() RETURNS BOOLEAN BEGIN
		IF FIELDNAME(InputExceptionList.[1]) IS NULL THEN
			SET Environment.Properties = InputRoot.Properties;
			DECLARE srcMsgBlob BLOB ASBITSTREAM(InputRoot.XMLNSC,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
			SET Environment.srcMsg = CAST(srcMsgBlob AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
			SET Environment.operation = InputRoot.XMLNSC.WpsSifProcess.Operation;
			CALL writeToLogFile(MessageFlowLabel, 'WPS_INFO', 'INFO','************START************') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'WPS_INFO', 'INFO','SIF Process Request XML Received with the Operation is :' ||Environment.operation ) INTO rc;
			SET Environment.chlId = InputRoot.XMLNSC.WpsSifProcess.Channel;
			SET Environment.refernce = InputRoot.XMLNSC.WpsSifProcess.Reference;
			SET sifFileName = Environment.chlId||Environment.refernce ;
			SET Environment.Chlreference = sifFileName;
			SET Environment.identifier = InputRoot.XMLNSC.WpsSifProcess.(XMLNSC.Attribute)OptionalIdentifier;
			SET Environment.dbQueryCount = '17A';
			CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
			IF Environment.Exception = 'True' THEN
				RETURN FALSE;
			END IF;
			CALL writeToLogFile(MessageFlowLabel, 'WPS_INFO', 'INFO','Channel Reference :'||Environment.refernce ) INTO rc;
			IF Environment.operation = 'P' AND Environment.identifier IS NULL THEN
				/*Should Not process the SIF file if the record is already processed AND SENT TO CBO FOR PROCESSING ESB should ignore those request*/
				IF Environment.PayType.CBO_STATUS = 'CBO_TECH_VAL_SUCCESS' THEN
					SET Environment.dbQueryCount = '17';
					CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
					IF Environment.Exception = 'True' THEN
						RETURN FALSE;
					END IF;
					CALL ProcessRequestToCBS();

					SET Environment.dbQueryCount = '18';
					CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
					IF Environment.Exception = 'True' THEN
						RETURN FALSE;
					END IF;

					propagate to TERMINAL 'out';
					CALL writeToLogFile(MessageFlowLabel, 'WPS_INFO', 'INFO','CBS TRAN REF :'||Environment.var.hedTxRefId) INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'WPS_INFO', 'INFO','Sending For SingleEntryPosting') INTO rc;
				END IF;
				/*Processing the request which is for FORCE*/
			ELSEIF Environment.operation = 'F' THEN
				/*Should Not process the SIF file if the record is already processed AND SENT TO CBO FOR PROCESSING ESB should ignore those request*/
				IF Environment.PayType.CBO_STATUS = 'CBS_PAYER_DEBIT_FAILED' THEN

					SET Environment.dbQueryCount = '17';
					CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
					IF Environment.Exception = 'True' THEN
						RETURN FALSE;
					END IF;
					SET OutputRoot.XMLNSC.urn:Request.(XMLNSC.NamespaceDecl)xmlns:urn = urn;
					SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:channel = CHANEEL;
					SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:user = USER;
					SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:workstation = WORKSTATION;
					SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:transactionDate = CAST(CURRENT_GMTDATE AS CHARACTER FORMAT 'yyyy-MM-dd');
					SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:transactionTime = CAST(CURRENT_TIME AS CHARACTER FORMAT 'HH:mm:ss');
					SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:transactionReference = '24H'||CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyMMddHHmmssSSS');
					SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:channelReserved = CHANNELRESERVED;

					SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.(XMLNSC.Attribute)optionIdentifier = Environment.PayType.PAYMENT_TYPE ||'_CBS_PAYER_DEBIT_SENT_FORCE';
					SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:account = Environment.data.PAYER_ACCOUNT_NO;
					SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:amount = '-' || CAST(Environment.data.TOTAL_SALARIES AS CHARACTER);
					SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:currency = CURRENCY;
					/*Narratives for Debiting the Employer*/
					SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:userReference = Environment.data.REFERENCE; /*CBS Reference*/
					SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:narratives.urn:narrative[1] = Environment.data.SALARY_YEAR ||'/'||Environment.data.SALARY_MONTH; /**/
					SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:narratives.urn:narrative[2] = Environment.PayType.PAYMENT_TYPE;
					SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:narratives.urn:narrative[3] = Environment.data.NO_OF_RECORDS;
					SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:narratives.urn:narrative[4] = SUBSTRING(Environment.data.SIF_CBO_FILE_NAME AFTER 'SIF_');



					SET Environment.var.hedTxRefId = OutputRoot.XMLNSC.urn:Request.urn:Header.urn:transactionReference;
					SET cbsReqMessage = ASBITSTREAM(OutputRoot.XMLNSC,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
					SET Environment.CbsReqMessage = CAST(cbsReqMessage AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
					SET Environment.dbQueryCount = '18';
					CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
					IF Environment.Exception = 'True' THEN
						RETURN FALSE;
					END IF;
					propagate to TERMINAL 'out';
					CALL writeToLogFile(MessageFlowLabel, 'WPS_INFO', 'INFO','CBS TRAN REF :'||Environment.var.hedTxRefId) INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'WPS_INFO', 'INFO','Sending single entry posting message for debiting OC account Forcefully:' || Environment.data.PAYER_ACCOUNT_NO ) INTO rc;

				END IF;
			ELSEIF Environment.operation = 'P' AND Environment.identifier = 'PassThru' THEN
				/*Should Not process the SIF file if the record is already processed AND SENT TO CBO FOR PROCESSING ESB should ignore those request*/
				IF Environment.PayType.CBO_STATUS = 'CBO_TECH_VAL_SUCCESS'THEN
					SET Environment.dbQueryCount = '35';
					CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
					IF Environment.Exception = 'True' THEN
						RETURN FALSE;
					END IF;
					CALL writeToLogFile(MessageFlowLabel, 'WPS_INFO', 'INFO','optionIdentifier is PassThru,Updated status as CBS_PAYER_DEBIT_SUCCESS in TXN table') INTO rc;
				END IF;
			ELSEIF Environment.operation = 'R' THEN
				/*Retry Request should be processed when Employer Debit failed.*/

				IF Environment.PayType.CBO_STATUS = 'CBS_PAYER_DEBIT_FAILED' AND NOT EXISTS(InputRoot.XMLNSC.WpsSifProcess.Employee[]) THEN
					/*This is like normal processing request came from Channel*/
					SET Environment.dbQueryCount = '17';
					CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
					IF Environment.Exception = 'True' THEN
						RETURN FALSE;
					END IF;
					CALL ProcessRequestToCBS();

					SET Environment.dbQueryCount = '18';
					CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
					IF Environment.Exception = 'True' THEN
						RETURN FALSE;
					END IF;

					propagate to TERMINAL 'out';
					CALL writeToLogFile(MessageFlowLabel, 'WPS_INFO', 'INFO','Updated status as CBS_PAYER_DEBIT_SENT in TXN table') INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'WPS_INFO', 'INFO','Sending single entry posting message for debiting OC account to  Retry Again:' || Environment.data.PAYER_ACCOUNT_NO ) INTO rc;

				ELSEIF Environment.PayType.CBO_STATUS = 'CBS_PAYER_DEBIT_SUCCESS' AND EXISTS(InputRoot.XMLNSC.WpsSifProcess.Employee[]) THEN
					/*Retry requet received when Payer Debit success and emp credit failed or emp setlement credit failed*/
					DECLARE recordRef REFERENCE TO InputRoot.XMLNSC.WpsSifProcess.Employee[>];
					WHILE LASTMOVE(recordRef) DO
						SET Environment.recordRef = recordRef;
						DECLARE count INTEGER 1;
						SET Environment.dbQueryCount = '19';
						CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
						IF Environment.Exception = 'True' THEN
							RETURN FALSE;
						END IF;
						SET OutputRoot.XMLNSC.urn:Request.(XMLNSC.NamespaceDecl)xmlns:urn = urn;
						SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:channel = CHANEEL;
						SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:user = USER;
						SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:workstation = WORKSTATION;
						SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:transactionDate = CAST(CURRENT_GMTDATE AS CHARACTER FORMAT 'yyyy-MM-dd');
						SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:transactionTime = CAST(CURRENT_TIME AS CHARACTER FORMAT 'HH:mm:ss');
						--SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:transactionReference = '24R'||CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHmmssSSS') || CAST(count AS CHARACTER);
						-- IF Payer_BIC = Environment.recordRef.Bank THEN
						SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:transactionReference = '24E'||CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyMMddHHmmssSSS') || CAST(count AS CHARACTER);
						-- ELSE
						-- SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:transactionReference = '24S'||CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyMMddHHmmssSSS') || CAST(count AS CHARACTER);
						-- END IF;
						SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:channelReserved = CHANNELRESERVED;
						SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.(XMLNSC.Attribute)optionIdentifier = Environment.PayType.PAYMENT_TYPE||'_'||'CBS_EMP_CREDIT_REQ_SENT';
						SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:account = Environment.recordRef.Account;
						SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:amount = Environment.recordRef.NetSalary;
						SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:currency = CURRENCY;
						/*Narratives for Crediting to Employee account which in On us*/
						SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:userReference = Environment.Chlreference; /*CBS Reference*/
						SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:narratives.urn:narrative[1] = Environment.PayType.SALARY_YEAR||'/'||Environment.PayType.SALARY_MONTH; /**/
						SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:narratives.urn:narrative[2] = Environment.PayType.PAYER_CRNO;
						SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:narratives.urn:narrative[3] = recordRef.REFERENCE_NUMBER;
						SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:narratives.urn:narrative[4] = SUBSTRING(Environment.PayType.SIF_CBO_FILE_NAME AFTER 'SIF_');

						SET Environment.var.hedTxRefId = OutputRoot.XMLNSC.urn:Request.urn:Header.urn:transactionReference;
						SET cbsReqMessage = ASBITSTREAM(OutputRoot.XMLNSC,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
						SET Environment.CbsReqMessage = CAST(cbsReqMessage AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
						SET Environment.dbQueryCount = '20';
						CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
						IF Environment.Exception = 'True' THEN
							RETURN FALSE;
						END IF;
						propagate to TERMINAL 'out';
						CALL writeToLogFile(MessageFlowLabel, 'WPS_INFO', 'INFO','Updated status as CBS_EMP_CREDIT_REQ_SENT in TXN table  for Record_id'|| Environment.recordRef.Id || 'And Channel Reference is ' || Environment.Chlreference) INTO rc;
						CALL writeToLogFile(MessageFlowLabel, 'WPS_INFO', 'INFO','Sending single entry posting message for Crediting Employee  account :' || Environment.recordRef.Account ) INTO rc;

						SET count = count + 1;
						MOVE recordRef NEXTSIBLING;
					END WHILE;
				END IF;
			ELSEIF Environment.operation = 'RJ' THEN
				SET Environment.dbQueryCount = '21';
				CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
				IF Environment.Exception = 'True' THEN
					RETURN FALSE;
				END IF;
				CALL writeToLogFile(MessageFlowLabel, 'WPS_INFO', 'INFO','Updated status as REJECTED in Header AND TXN table  for  Channel Reference is ' || Environment.Chlreference) INTO rc;
			END IF;
		ELSE
			IF FIELDNAME(InputExceptionList.[1]) IS NOT NULL AND Environment.variables.count >= 1 THEN
				SET OutputExceptionList = InputExceptionList;
				CALL com.oab.exceptionhandler.DBInsertion(LOG4J_CONF_FILE, InputRoot, InputExceptionList, Environment, OutputRoot);
			ELSE
				SET OutputRoot.Properties = Environment.Properties;
				CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' PARSE(Environment.srcMsg,Environment.Properties.Encoding,Environment.Properties.CodedCharSetId);
				SET OutputExceptionList = InputExceptionList;
				SET Environment.RetryQueue = 'WPS_RETRY_Q';
				PROPAGATE TO TERMINAL 'out3' DELETE NONE;
				SET Environment.Exception = 'True';
			END IF;
		END IF;
	END;
	CREATE PROCEDURE SendAcknolegment()
	BEGIN
		DECLARE Exce CHARACTER;
		CALL CopyMessageHeaders();

		DECLARE WPSRef REFERENCE TO OutputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS WPSRef NAME 'WPSResponse';
		SET WPSRef.ResponseCode = 'WPS000';
		SET WPSRef.ResponseString = 'Message has been received ::'|| Environment.refernce;

		PROPAGATE TO TERMINAL 'out1';
		CALL writeToLogFile(MessageFlowLabel, 'WPS_INFO', 'INFO','Acknowldgement send to Channel  ' || Environment.refernce) INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'WPS_INFO', 'INFO','************END*************') INTO rc;
	END;
	CREATE PROCEDURE ProcessRequestToCBS()
	BEGIN

		SET OutputRoot.XMLNSC.urn:Request.(XMLNSC.NamespaceDecl)xmlns:urn = urn;
		SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:channel = CHANEEL;
		SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:user = USER;
		SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:workstation = WORKSTATION;
		SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:transactionDate = CAST(CURRENT_GMTDATE AS CHARACTER FORMAT 'yyyy-MM-dd');
		SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:transactionTime = CAST(CURRENT_TIME AS CHARACTER FORMAT 'HH:mm:ss');
		SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:transactionReference = '24H'||CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyMMddHHmmssSSS');
		SET OutputRoot.XMLNSC.urn:Request.urn:Header.urn:channelReserved = CHANNELRESERVED;
		SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.(XMLNSC.Attribute)optionIdentifier = Environment.PayType.PAYMENT_TYPE||'_'||'CBS_PAYER_DEBIT_SENT';
		SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:account = Environment.data.PAYER_ACCOUNT_NO;
		SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:amount = '-' || CAST(Environment.data.TOTAL_SALARIES AS CHARACTER);
		SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:currency = CURRENCY;
		SET Environment.var.hedTxRefId = OutputRoot.XMLNSC.urn:Request.urn:Header.urn:transactionReference;
		/*Narratives for Debiting the Employer*/
		SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:userReference = Environment.data.REFERENCE; /*CBS Reference*/
		SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:narratives.urn:narrative[1] = Environment.data.SALARY_YEAR ||'/'||Environment.data.SALARY_MONTH; /**/
		SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:narratives.urn:narrative[2] = Environment.PayType.PAYMENT_TYPE;
		SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:narratives.urn:narrative[3] = Environment.data.NO_OF_RECORDS;
		SET OutputRoot.XMLNSC.urn:Request.urn:Data.urn:SingleEntryFinancialTransaction.urn:narratives.urn:narrative[4] = SUBSTRING(Environment.data.SIF_CBO_FILE_NAME AFTER 'SIF_');


		SET cbsReqMessage = ASBITSTREAM(OutputRoot.XMLNSC,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
		SET Environment.CbsReqMessage = CAST(cbsReqMessage AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);

	END;
END MODULE;