/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		CALL TdsToXml();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		--SET OutputRoot = InputRoot;
	END;
	CREATE PROCEDURE TdsToXml ( )
	BEGIN
		SET OutputRoot.XMLNSC.Response.employee = InputRoot.DFDL.Data.emp;
		DECLARE J INTEGER;
		DECLARE I INTEGER 1;
        SET J = CARDINALITY(InputRoot.DFDL.Data.Address[]);
--		DECLARE ref REFERENCE TO InputRoot.DFDL.Data.Address[>];
--		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.Response.Address;
		
	  /*This is first way and it is efficiency */
--		WHILE LASTMOVE(ref) DO
--			CREATE LASTCHILD OF OutputRoot.XMLNSC.Response AS outRef NAME 'Address';
--			SET outRef = ref;
--			MOVE ref NEXTSIBLING;
--		END WHILE;
		
		
		/*This second way but not efficiency , but when there is some other details inbetween address we can go for this approach*/
		WHILE I<=J DO
			SET OutputRoot.XMLNSC.Response.Address[I]  = InputRoot.DFDL.Data.Address[I];
			SET I = I + 1;
		END WHILE;
		
		
	END;
