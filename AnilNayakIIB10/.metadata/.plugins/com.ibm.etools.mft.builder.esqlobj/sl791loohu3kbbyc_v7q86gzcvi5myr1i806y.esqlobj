/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();

		DECLARE I INTEGER;
		set I=1;
		DECLARE J INTEGER;
		DECLARE ch,p,pkv,card INTEGER;
		DECLARE refin1 REFERENCE TO InputRoot.XMLNSC.MSG.ItemDescriptor.Record[1];
		DECLARE refout1 REFERENCE TO OutputRoot.XMLNSC.MSG.ItemDescriptor;
		DECLARE refout2 REFERENCE to OutputRoot;
		CREATE FIELD OutputRoot.XMLNSC.MSG.ItemDescriptor;
		set p=1;
		set pkv=1;
		--SET J = CARDINALITY(InputRoot.XMLNSC.MSG.ItemDescriptor.Record[]);
		DECLARE t1 ROW;
		--set t1.id[I]=refin1.additem.id;---FIRST ID.
		--SET I=I+1;

		WHILE LASTMOVE(refin1) DO


			set card=CARDINALITY(t1.id[]);
			set ch=refin1.additem.id;

			X:while(p<=card) do


			IF (ch = t1.id[p]) THEN

				set pkv=0;
				LEAVE X;

			else
				--set t1.id[I]=ch;
				set p=p+1;
				--set I=I+1;
			END IF;

		END WHILE;

		set p=1;

		if(pkv<>0) then
		-- CREATE LASTCHILD OF refout1 as refout2 NAME 'Record';
		set t1.id[I]=ch;
		SET I=I+1;
		CREATE LASTCHILD OF OutputRoot.XMLNSC.MSG.ItemDescriptor as refout2 NAME 'Record';

		SET refout2=refin1;

	end if;


	set pkv=1;
	MOVE refin1 NEXTSIBLING REPEAT NAME;

END WHILE;
RETURN TRUE;
END;

CREATE PROCEDURE CopyMessageHeaders() BEGIN
	DECLARE I INTEGER 1;
	DECLARE J INTEGER;
	SET J = CARDINALITY(InputRoot.*[]);
	WHILE I < J DO
		SET OutputRoot.*[I] = InputRoot.*[I];
		SET I = I + 1;
	END WHILE;
END;

CREATE PROCEDURE CopyEntireMessage() BEGIN

	SET OutputRoot=InputRoot;
	--DECLARE k REFERENCE TO InputRoot.XMLNSC.MSG.Descriptor.Record.add.id;
	-- SET OutputRoot.XMLNSC.MSG.ItemDescriptor.Record[I] =InputRoot.XMLNSC.MSG.ItemDescriptor.Record[I] ;
	-- set k = OutputRoot.XMLNSC.MSG.ItemDescriptor.Record[I].add.id;
	-- SET I = I + 1;
	-- set m =InputRoot.XMLNSC.MSG.ItemDescriptor.Record[I].add.id;
	-- if k = m then
	-- set I = I - 1;
	-- DELETE LASTCHILD OF OutputRoot.XMLNSC.MSG.ItemDescriptor.Record[I];
	-- set I =I + 1;
	-- else
	-- SET OutputRoot.XMLNSC.MSG.ItemDescriptor.Record[I] =InputRoot.XMLNSC.MSG.ItemDescriptor.Record[I] ;
	-- end if;
	--

END;
