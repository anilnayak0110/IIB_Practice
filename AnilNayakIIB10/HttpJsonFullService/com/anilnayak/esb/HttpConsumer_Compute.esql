BROKER SCHEMA com.anilnayak.esb


CREATE COMPUTE MODULE HttpConsumer_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		CALL RouteRequest();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		--SET OutputRoot = InputRoot;
	END;
	
	CREATE PROCEDURE RouteRequest ( )
	BEGIN
		SET OutputRoot                 = InputRoot;
		SET Environment.SaveState.MQMD = InputRoot.MQMD;
		DECLARE queueName CHARACTER InputRoot.MQMD.SourceQueue;
		
		DECLARE targetObject CHARACTER;
		
		IF queueName          = 'ESB.GET' THEN
			SET targetObject  = '*';
		ELSE
			THROW USER EXCEPTION MESSAGE 2995 VALUES('No data in target message');
		END IF;
		
		CASE queueName
			
		WHEN 'ESB.GET' THEN
			SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'GET';
		WHEN 'ESB.POST' THEN
			SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'POST';
	    WHEN 'ESB.PUT' THEN
	    	SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'PUT';
	    WHEN 'ESB.DELETE' THEN
	    	SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'DELETE';
		END CASE;
		
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL             = 'http://localhost:7800/jsonrequest/'||targetObject;
		
	END;
END MODULE;


CREATE COMPUTE MODULE MqJsonClientConsumer_RestoreMQMD
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- The HTTP Request node was set to simply replace the message
		-- tree with the HTTP responce. So we need to remove the
		-- HTTP headers and restore the MQMD
		
		-- Copy the Properties over
		SET OutputRoot.Properties = InputRoot.Properties;
		
		-- Restore the MDMQ for reply
		SET OutputRoot.MQMD = Environment.SaveSate.MQMD;
		
		-- Copy the JSON Data over
		SET OutputRoot.JSON = InputRoot.JSON;
	END;
END MODULE;

